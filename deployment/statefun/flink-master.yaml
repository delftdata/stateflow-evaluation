apiVersion: v1
kind: ConfigMap
metadata:
  name: statefun-config
  namespace: stateflow
  labels:
    app: flink
data:
  statefun-module: |+
    version: '3.0'
    module:
      meta:
        type: remote
      spec:
        egresses:
          - egress:
              meta:
                id: stateflow/kafka-egress
                type: io.statefun.kafka/egress
              spec:
                address: kafka-broker:9093
        endpoints:
          - endpoint:
              meta:
                kind: http
              spec:
                functions: globals/ping
                urlPathTemplate: http://host-machine:8000/statefun
          - endpoint:
              meta:
                kind: http
              spec:
                functions: global/User
                urlPathTemplate: http://host-machine:8000/statefun
          - endpoint:
              meta:
                kind: http
              spec:
                functions: global/User_create
                urlPathTemplate: http://host-machine:8000/statefun
          - endpoint:
              meta:
                kind: http
              spec:
                functions: global/Geo
                urlPathTemplate: http://host-machine:8000/statefun
          - endpoint:
              meta:
                kind: http
              spec:
                functions: global/Geo_create
                urlPathTemplate: http://host-machine:8000/statefun
          - endpoint:
              meta:
                kind: http
              spec:
                functions: global/Rate
                urlPathTemplate: http://host-machine:8000/statefun
          - endpoint:
              meta:
                kind: http
              spec:
                functions: global/Rate_create
                urlPathTemplate: http://host-machine:8000/statefun
          - endpoint:
              meta:
                kind: http
              spec:
                functions: global/Search
                urlPathTemplate: http://host-machine:8000/statefun
          - endpoint:
              meta:
                kind: http
              spec:
                functions: global/Search_create
                urlPathTemplate: http://host-machine:8000/statefun
          - endpoint:
              meta:
                kind: http
              spec:
                functions: global/Reservation
                urlPathTemplate: http://host-machine:8000/statefun
          - endpoint:
              meta:
                kind: http
              spec:
                functions: global/Reservation_create
                urlPathTemplate: http://host-machine:8000/statefun
          - endpoint:
              meta:
                kind: http
              spec:
                functions: global/Profile
                urlPathTemplate: http://host-machine:8000/statefun
          - endpoint:
              meta:
                kind: http
              spec:
                functions: global/Profile_create
                urlPathTemplate: http://host-machine:8000/statefun
          - endpoint:
              meta:
                kind: http
              spec:
                functions: global/Recommend
                urlPathTemplate: http://host-machine:8000/statefun
          - endpoint:
              meta:
                kind: http
              spec:
                functions: global/Recommend_create
                urlPathTemplate: http://host-machine:8000/statefun
        ingresses:
          - ingress:
              meta:
                id: stateflow/kafka-ingress
                type: io.statefun.kafka/ingress
              spec:
                address: kafka-broker:9093
                consumerGroupId: stateflow-statefun-consumer
                topics:
                  - targets:
                      - global/User
                    topic: global_User
                    valueType: stateflow/byte_type
                  - targets:
                      - global/User_create
                    topic: global_User_create
                    valueType: stateflow/byte_type
                  - targets:
                      - global/Geo
                    topic: global_Geo
                    valueType: stateflow/byte_type
                  - targets:
                      - global/Geo_create
                    topic: global_Geo_create
                    valueType: stateflow/byte_type
                  - targets:
                      - global/Rate
                    topic: global_Rate
                    valueType: stateflow/byte_type
                  - targets:
                      - global/Rate_create
                    topic: global_Rate_create
                    valueType: stateflow/byte_type
                  - targets:
                      - global/Search
                    topic: global_Search
                    valueType: stateflow/byte_type
                  - targets:
                      - global/Search_create
                    topic: global_Search_create
                    valueType: stateflow/byte_type
                  - targets:
                      - global/Reservation
                    topic: global_Reservation
                    valueType: stateflow/byte_type
                  - targets:
                      - global/Reservation_create
                    topic: global_Reservation_create
                    valueType: stateflow/byte_type
                  - targets:
                      - global/Profile
                    topic: global_Profile
                    valueType: stateflow/byte_type
                  - targets:
                      - global/Profile_create
                    topic: global_Profile_create
                    valueType: stateflow/byte_type
                  - targets:
                      - global/Recommend
                    topic: global_Recommend
                    valueType: stateflow/byte_type
                  - targets:
                      - global/Recommend_create
                    topic: global_Recommend_create
                    valueType: stateflow/byte_type
                  - targets:
                      - globals/ping
                    topic: globals_ping
                    valueType: stateflow/byte_type
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: flink-config
  namespace: stateflow
  labels:
    app: flink
data:
  flink-conf.yaml: |+
    jobmanager.rpc.address: flink-jobmanager
    taskmanager.numberOfTaskSlots: 1
    blob.server.port: 6124
    jobmanager.rpc.port: 6123
    taskmanager.rpc.port: 6122
    classloader.parent-first-patterns.additional: org.apache.flink.statefun;org.apache.kafka;com.google.protobuf
    parallelism.default: 1
    statefun.flink-job-name: stateflow
    execution.checkpointing.interval: 10sec
    execution.checkpointing.mode: AT_LEAST_ONCE
    restart-strategy: fixed-delay
    restart-strategy.fixed-delay.attempts: 2147483647
    restart-strategy.fixed-delay.delay: 1sec
    jobmanager.memory.process.size: 1g
    taskmanager.memory.process.size: 1g
    parallelism.default: 3
  log4j.properties: |+
    rootLogger.level = INFO
    rootLogger.appenderRef.console.ref = ConsoleAppender
    rootLogger.appenderRef.rolling.ref = RollingFileAppender
    logger.akka.name = akka
    logger.akka.level = INFO
    logger.kafka.name= org.apache.kafka
    logger.kafka.level = INFO
    logger.hadoop.name = org.apache.hadoop
    logger.hadoop.level = INFO
    logger.zookeeper.name = org.apache.zookeeper
    logger.zookeeper.level = INFO
    appender.console.name = ConsoleAppender
    appender.console.type = CONSOLE
    appender.console.layout.type = PatternLayout
    appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss,SSS} %-5p %-60c %x - %m%n
    appender.rolling.name = RollingFileAppender
    appender.rolling.type = RollingFile
    appender.rolling.append = false
    appender.rolling.fileName = ${sys:log.file}
    appender.rolling.filePattern = ${sys:log.file}.%i
    appender.rolling.layout.type = PatternLayout
    appender.rolling.layout.pattern = %d{yyyy-MM-dd HH:mm:ss,SSS} %-5p %-60c %x - %m%n
    appender.rolling.policies.type = Policies
    appender.rolling.policies.size.type = SizeBasedTriggeringPolicy
    appender.rolling.policies.size.size=100MB
    appender.rolling.strategy.type = DefaultRolloverStrategy
    appender.rolling.strategy.max = 10
    logger.netty.name = org.apache.flink.shaded.akka.org.jboss.netty.channel.DefaultChannelPipeline
    logger.netty.level = OFF
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flink-jobmanager
  namespace: stateflow
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flink
      component: jobmanager
  template:
    metadata:
      labels:
        app: flink
        component: jobmanager
    spec:
      containers:
        - name: jobmanager
          image: apache/flink-statefun:3.0.0
          env:
          - name: ROLE
            value: "master"
          ports:
            - containerPort: 6123
              name: rpc
            - containerPort: 6124
              name: blob
            - containerPort: 8081
              name: ui
          resources:
            requests:
              memory: "1024Mi"
              cpu: "750m"
            limits:
              memory: "1024Mi"
              cpu: "1000m"
          livenessProbe:
            tcpSocket:
              port: 6123
            initialDelaySeconds: 30
            periodSeconds: 60
          volumeMounts:
            - name: flink-config-volume
              mountPath: /opt/flink/conf
            - name: statefun-config-volume
              mountPath: /opt/statefun/modules/stateflow/
          securityContext:
            runAsUser: 9999  # refers to user _flink_ from official flink image, change if necessary
      volumes:
        - name: flink-config-volume
          configMap:
            name: flink-config
            items:
              - key: flink-conf.yaml
                path: flink-conf.yaml
              - key: log4j.properties
                path: log4j-console.properties
        - name: statefun-config-volume
          # Create configMap using kubectl: kubectl create configmap module --from-file=module_key=module.yaml
          configMap:
            name: statefun-config
            items:
              - key: statefun-module
                path: module.yaml
---
apiVersion: v1
kind: Service
metadata:
  name: flink-jobmanager
spec:
  type: ClusterIP
  ports:
    - name: rpc
      port: 6123
    - name: blob
      port: 6124
    - name: ui
      port: 8081
  selector:
    app: flink
    component: jobmanager
---
apiVersion: v1
kind: Service
metadata:
  name: flink-jobmanager-rest
  namespace: stateflow
spec:
  type: NodePort
  ports:
    - name: rest
      port: 8081
      targetPort: 8081
  selector:
    app: flink
    component: jobmanager